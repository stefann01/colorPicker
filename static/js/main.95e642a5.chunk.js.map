{"version":3,"sources":["components/NavigationBar/NavigationBar.module.scss","components/NavigationBar/NavigationBar.tsx","components/ColorPalette/ColorPalette.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","NavigationBar","Navbar","bg","expand","variant","Brand","Nav","Link","onClick","console","log","className","styles","test","PaletteModel","colors","initialColors","React","memo","useState","palette","setPallete","height","setHeight","useSnackbar","enqueueSnackbar","closeSnackbar","useEffect","actualHeight","document","getElementById","offsetHeight","handleKeyDown","event","keyCode","items","i","length","Math","random","toString","padStart","window","addEventListener","removeEventListener","Container","fluid","Row","style","overflowY","marginTop","marginBottom","Col","ListGroup","id","map","color","index","Item","key","display","type","value","onChange","target","changePalette","float","marginLeft","textAlign","Button","copy","autoHideDuration","copyCodeToClipboard","backgroundColor","width","App","maxSnack","anchorOrigin","vertical","horizontal","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.95e642a5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"test\":\"NavigationBar_test__vDAZh\"};","import React from \"react\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport styles from \"./NavigationBar.module.scss\";\r\n\r\nfunction NavigationBar() {\r\n    return (\r\n        <>\r\n            <Navbar bg=\"dark\" expand=\"lg\" variant=\"dark\">\r\n                <Navbar.Brand>Color Picker</Navbar.Brand>\r\n                <Nav>\r\n                    <Nav.Link\r\n                        onClick={() => {\r\n                            console.log(\"Clicked\");\r\n                        }}\r\n                        className={styles.test}\r\n                    >\r\n                        Create Pallete\r\n                    </Nav.Link>\r\n                    <Nav.Link>Choose from Image</Nav.Link>\r\n                </Nav>\r\n            </Navbar>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default NavigationBar;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport copy from \"copy-to-clipboard\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\nclass PaletteModel {\r\n    constructor(public colors: Array<string>) {}\r\n}\r\n\r\nconst initialColors = new PaletteModel([\"#ff2345\", \"#dd5412\", \"#ccdf90\", \"#123456\", \"#0000aa\"]);\r\nfunction ColorPalette() {\r\n    const [palette, setPallete] = useState<PaletteModel>(initialColors);\r\n    const [height, setHeight] = useState<number>(0);\r\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n\r\n    useEffect(() => {\r\n        const actualHeight = document.getElementById(\"picker\")?.offsetHeight;\r\n        if (actualHeight) {\r\n            setHeight(actualHeight);\r\n        }\r\n    }, []);\r\n\r\n    const handleKeyDown = (event: any) => {\r\n        console.log(\"A key was pressed\", event.keyCode);\r\n        if (event.keyCode === 32) {\r\n            let items: string[] = [];\r\n            for (let i = 0; i < palette.colors.length; ++i) {\r\n                items = [...items, \"#\" + ((Math.random() * 0xffffff) << 0).toString(16).padStart(6, \"0\")];\r\n            }\r\n            setPallete(new PaletteModel(items));\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        window.addEventListener(\"keydown\", handleKeyDown);\r\n        return () => {\r\n            window.removeEventListener(\"keydown\", handleKeyDown);\r\n        };\r\n    }, [handleKeyDown]);\r\n\r\n    function changePalette(event: any, index: number) {\r\n        let items = [...palette.colors];\r\n        items[index] = event.target.value;\r\n        setPallete(new PaletteModel(items));\r\n    }\r\n\r\n    function copyCodeToClipboard(color: string) {\r\n        copy(color.toString());\r\n        enqueueSnackbar(\"Copied to clipboard\", {\r\n            variant: \"success\",\r\n            autoHideDuration: 1200,\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Row style={{ height: \"400px\", overflowY: \"scroll\", marginTop: \"10px\", marginBottom: \"10px\" }}>\r\n                <Col>\r\n                    <ListGroup id=\"picker\">\r\n                        {palette.colors.map((color, index) => (\r\n                            <ListGroup.Item key={index} style={{ display: \"flex\", height: \"60px\" }}>\r\n                                <label>\r\n                                    <input type=\"color\" value={color} onChange={(event) => changePalette(event, index)} />\r\n                                </label>\r\n                                <label style={{ float: \"right\", marginLeft: \"auto\", textAlign: \"left\" }}>{color}</label>\r\n\r\n                                <Button\r\n                                    onClick={() => {\r\n                                        copyCodeToClipboard(color);\r\n                                    }}\r\n                                    style={{ float: \"right\" }}\r\n                                    variant=\"primary\"\r\n                                >\r\n                                    Clipboard\r\n                                </Button>\r\n                            </ListGroup.Item>\r\n                        ))}\r\n                    </ListGroup>\r\n                </Col>\r\n            </Row>\r\n            <Row style={{ height: \"400px\" }}>\r\n                {palette.colors.map((color, index) => (\r\n                    <Col key={index} style={{ backgroundColor: color, width: \"100%\", height: height }}></Col>\r\n                ))}\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default React.memo(ColorPalette);\r\n","import React from \"react\";\nimport \"./App.css\";\nimport NavigationBar from \"./components/NavigationBar/NavigationBar\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport ColorPalette from \"./components/ColorPalette/ColorPalette\";\nimport { SnackbarProvider } from \"notistack\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <SnackbarProvider\n                maxSnack={3}\n                anchorOrigin={{\n                    vertical: \"bottom\",\n                    horizontal: \"center\",\n                }}\n            >\n                <NavigationBar />\n                <ColorPalette />\n            </SnackbarProvider>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}