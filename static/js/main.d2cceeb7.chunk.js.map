{"version":3,"sources":["components/ColorPalette/colorPalette.module.scss","components/NavigationBar/NavigationBar.module.scss","components/NavigationBar/NavigationBar.tsx","components/ColorPalette/ColorPalette.tsx","components/OptionBar/OptionBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","NavigationBar","Container","fluid","Navbar","expand","variant","bg","Brand","href","Text","onClick","console","log","className","styles","test","PaletteModel","colors","initialColors","React","memo","useState","palette","setPallete","setHeight","useSnackbar","enqueueSnackbar","closeSnackbar","useEffect","actualHeight","document","getElementById","offsetHeight","handleKeyDown","event","keyCode","items","i","length","Math","random","toString","padStart","window","addEventListener","removeEventListener","colorPalette","map","color","index","key","parent","style","backgroundColor","width","type","value","marginBottom","child","data-tip","copy","autoHideDuration","copyCodeToClipboard","iconMove","OptionBar","App","height","maxSnack","anchorOrigin","vertical","horizontal","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sGACAA,EAAOC,QAAU,CAAC,aAAe,mCAAmC,OAAS,6BAA6B,MAAQ,4BAA4B,SAAW,iC,mBCAzJD,EAAOC,QAAU,CAAC,KAAO,8B,4KCsBVC,MAlBf,WACI,OACI,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACC,EAAA,EAAD,CAAQC,OAAO,KAAKC,QAAQ,OAAOC,GAAG,QAClC,kBAACH,EAAA,EAAOI,MAAR,CAAcC,KAAK,KAAnB,UACA,kBAACL,EAAA,EAAOM,KAAR,CACIC,QAAS,WACLC,QAAQC,IAAI,YAEhBC,UAAWC,IAAOC,MAJtB,qB,0GCIVC,EACF,WAAmBC,GAAwB,yBAAxBA,UAGjBC,EAAgB,IAAIF,EAAa,CAAC,UAAW,UAAW,UAAW,YAkE1DG,UAAMC,MAjErB,WAAyB,IAAD,EACUC,mBAAuBH,GADjC,mBACbI,EADa,KACJC,EADI,OAEQF,mBAAiB,GAFzB,mBAELG,GAFK,aAGuBC,cAAnCC,EAHY,EAGZA,gBAHY,EAGKC,cAEzBC,qBAAU,WAAO,IAAD,EACNC,EAAY,UAAGC,SAASC,eAAe,iBAA3B,aAAG,EAAmCC,aACpDH,GACAL,EAAUK,KAEf,IAEH,IAAMI,EAAgB,SAACC,GAEnB,GADAvB,QAAQC,IAAI,oBAAqBsB,EAAMC,SACjB,KAAlBD,EAAMC,QAAgB,CAEtB,IADA,IAAIC,EAAkB,GACbC,EAAI,EAAGA,EAAIf,EAAQL,OAAOqB,SAAUD,EACzCD,EAAK,sBAAOA,GAAP,CAAc,KAAwB,SAAhBG,KAAKC,UAAwB,GAAGC,SAAS,IAAIC,SAAS,EAAG,OAExFnB,EAAW,IAAIP,EAAaoB,MA4BpC,OAzBAR,qBAAU,WAEN,OADAe,OAAOC,iBAAiB,UAAWX,GAC5B,WACHU,OAAOE,oBAAoB,UAAWZ,MAE3C,CAACA,IAqBA,yBAAKpB,UAAWC,IAAOgC,cACnB,kBAAC,IAAD,MACCxB,EAAQL,OAAO8B,KAAI,SAACC,EAAOC,GAAR,OAChB,yBAAKC,IAAKD,EAAOpC,UAAWC,IAAOqC,OAAQC,MAAO,CAAEC,gBAAiBL,EAAOM,MAAO,SAC/E,2BAAOC,KAAK,OAAOC,MAAOR,EAAOI,MAAO,CAAEK,aAAc,UACxD,kBAAC,IAAD,CAAe5C,UAAWC,IAAO4C,MAAOC,WAAS,oBAAoBjD,QAAS,kBAlB9F,SAA6BsC,GACzBY,IAAKZ,EAAMP,YACXf,EAAgB,sBAAuB,CACnCrB,QAAS,UACTwD,iBAAkB,OAc0EC,CAAoBd,MACxG,kBAAC,IAAD,CAAmBnC,UAAWC,IAAO4C,MAAOC,WAAS,eACrD,6BACI,kBAAC,IAAD,CAAeA,WAAS,YAAY9C,UAAWC,IAAOiD,WACtD,kBAAC,IAAD,CAAgBJ,WAAS,aAAa9C,UAAWC,IAAOiD,oBC3DjEC,MAbf,WACI,OACI,oCACI,kBAAC/D,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACC,EAAA,EAAD,CAAQC,OAAO,KAAKC,QAAQ,OAAOC,GAAG,QAClC,kBAACH,EAAA,EAAOI,MAAR,CAAcC,KAAK,KAAnB,UACA,kBAACL,EAAA,EAAOM,KAAR,2BCgBLwD,MAlBf,WACI,OACI,yBAAKb,MAAO,CAAEc,OAAQ,SAClB,kBAAC,IAAD,CACIC,SAAU,EACVC,aAAc,CACVC,SAAU,MACVC,WAAY,WAGhB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCRIC,QACW,cAA7B5B,OAAO6B,SAASC,UAEe,UAA7B9B,OAAO6B,SAASC,UAEhB9B,OAAO6B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF/C,SAASC,eAAe,SDiIpB,kBAAmB+C,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1E,QAAQ0E,MAAMA,EAAMC,c","file":"static/js/main.d2cceeb7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"colorPalette\":\"colorPalette_colorPalette__1pkRI\",\"parent\":\"colorPalette_parent__3hQJ1\",\"child\":\"colorPalette_child__2WYFL\",\"iconMove\":\"colorPalette_iconMove__1MLQP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"test\":\"NavigationBar_test__vDAZh\"};","import React from \"react\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport styles from \"./NavigationBar.module.scss\";\r\nimport Container from \"react-bootstrap/esm/Container\";\r\n\r\nfunction NavigationBar() {\r\n    return (\r\n        <Container fluid>\r\n            <Navbar expand=\"lg\" variant=\"dark\" bg=\"dark\">\r\n                <Navbar.Brand href=\"#\">Navbar</Navbar.Brand>\r\n                <Navbar.Text\r\n                    onClick={() => {\r\n                        console.log(\"Clicked\");\r\n                    }}\r\n                    className={styles.test}\r\n                >\r\n                    Create Pallete\r\n                </Navbar.Text>\r\n            </Navbar>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default NavigationBar;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport copy from \"copy-to-clipboard\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\nimport styles from \"./colorPalette.module.scss\";\r\nimport { MdContentCopy } from \"react-icons/md\";\r\nimport { HiOutlineLockClosed, HiOutlineLockOpen } from \"react-icons/hi\";\r\nimport { AiOutlineLeft, AiOutlineRight } from \"react-icons/ai\";\r\nimport ReactTooltip from \"react-tooltip\";\r\nclass PaletteModel {\r\n    constructor(public colors: Array<string>) {}\r\n}\r\n\r\nconst initialColors = new PaletteModel([\"#ff2345\", \"#dd5412\", \"#ccdf90\", \"#123456\"]);\r\nfunction ColorPalette() {\r\n    const [palette, setPallete] = useState<PaletteModel>(initialColors);\r\n    const [height, setHeight] = useState<number>(0);\r\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n\r\n    useEffect(() => {\r\n        const actualHeight = document.getElementById(\"picker\")?.offsetHeight;\r\n        if (actualHeight) {\r\n            setHeight(actualHeight);\r\n        }\r\n    }, []);\r\n\r\n    const handleKeyDown = (event: any) => {\r\n        console.log(\"A key was pressed\", event.keyCode);\r\n        if (event.keyCode === 32) {\r\n            let items: string[] = [];\r\n            for (let i = 0; i < palette.colors.length; ++i) {\r\n                items = [...items, \"#\" + ((Math.random() * 0xffffff) << 0).toString(16).padStart(6, \"0\")];\r\n            }\r\n            setPallete(new PaletteModel(items));\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        window.addEventListener(\"keydown\", handleKeyDown);\r\n        return () => {\r\n            window.removeEventListener(\"keydown\", handleKeyDown);\r\n        };\r\n    }, [handleKeyDown]);\r\n\r\n    function changePalette(event: any, index: number) {\r\n        let items = [...palette.colors];\r\n        items[index] = event.target.value;\r\n        setPallete(new PaletteModel(items));\r\n    }\r\n\r\n    function copyCodeToClipboard(color: string) {\r\n        copy(color.toString());\r\n        enqueueSnackbar(\"Copied to clipboard\", {\r\n            variant: \"success\",\r\n            autoHideDuration: 1200,\r\n        });\r\n    }\r\n\r\n    function validateHexColor(color: string) {\r\n        return /^#[0-9A-F]{6}$/i.test(color);\r\n    }\r\n\r\n    return (\r\n        <div className={styles.colorPalette}>\r\n            <ReactTooltip />\r\n            {palette.colors.map((color, index) => (\r\n                <div key={index} className={styles.parent} style={{ backgroundColor: color, width: \"100%\" }}>\r\n                    <input type=\"text\" value={color} style={{ marginBottom: \"30px\" }} />\r\n                    <MdContentCopy className={styles.child} data-tip=\"Copy to Clipboard\" onClick={() => copyCodeToClipboard(color)} />\r\n                    <HiOutlineLockOpen className={styles.child} data-tip=\"Lock color\" />\r\n                    <div>\r\n                        <AiOutlineLeft data-tip=\"Move Left\" className={styles.iconMove} />\r\n                        <AiOutlineRight data-tip=\"Move Right\" className={styles.iconMove} />\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(ColorPalette);\r\n","import React from \"react\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Container from \"react-bootstrap/esm/Container\";\r\n\r\nfunction OptionBar() {\r\n    return (\r\n        <>\r\n            <Container fluid>\r\n                <Navbar expand=\"lg\" variant=\"dark\" bg=\"dark\">\r\n                    <Navbar.Brand href=\"#\">Navbar</Navbar.Brand>\r\n                    <Navbar.Text>Create Pallete</Navbar.Text>\r\n                </Navbar>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default OptionBar;\r\n","import React from \"react\";\nimport styles from \"./App.module.scss\";\nimport NavigationBar from \"./components/NavigationBar/NavigationBar\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport ColorPalette from \"./components/ColorPalette/ColorPalette\";\nimport { SnackbarProvider } from \"notistack\";\nimport OptionBar from \"./components/OptionBar/OptionBar\";\n\nfunction App() {\n    return (\n        <div style={{ height: \"100%\" }}>\n            <SnackbarProvider\n                maxSnack={3}\n                anchorOrigin={{\n                    vertical: \"top\",\n                    horizontal: \"center\",\n                }}\n            >\n                <NavigationBar />\n                <OptionBar />\n                <ColorPalette />\n            </SnackbarProvider>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}